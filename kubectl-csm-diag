#!/bin/bash

# Global variable
declare -a available_namespaces

usual_namespaces="powerflex,vxflexos,powermax,powerscale,isilon,unity,powerstore,csi-powerstore,csm,karavi,csm-operator,replication-controller,authorization"

tempdir=$(mktemp -d)

verbose=0

logs_args=""

function cleanup() {
  rm -rf "$tempdir"
}

# Set up a trap to call cleanup when the script exits or is interrupted
trap cleanup EXIT INT TERM

# Function to handle verbose output
log_verbose() {
  if [[ $verbose -eq 1 ]]; then
    echo "$@"
  fi
}
# Help function display command usage
function help() {
  cat <<EOF
Usage: $0 [options]...

This script performs a greeting function based on the provided options.

Options:
  -n ns1,ns2       It will capture the pod logs for all defined namespaces
		   Namespace are comma-separated
		   It not defined it will look through commonly used namespaces : $usual_namespaces
  -s               Include secrets in the output (false by default)
  -v               Verbose mode that tells every step
  -p               Get previous logs
  -h               Display this help and exit.
EOF
}

# Handle namespaces passed as argument option
function handle_namespaces {
  IFS=',' read -ra NAMESPACE_ARRAY <<<"$1"
  available_namespaces=()
  for namespace in "${NAMESPACE_ARRAY[@]}"; do
    echo "Namespace: $namespace"
    available_namespaces+=("$namespace") # Add to the list of available namespaces
  done
}

# Handle namespaces using usual suspects
function get_namespaces() {
  IFS=',' read -ra NAMESPACE_ARRAY <<<"$1"
  # Define an array of prefix
  prefixes=("" "csi-" "dell-" "dell-csi-")
  available_namespaces=()
  log_verbose "Namespace array: ${NAMESPACE_ARRAY[*]}"
  # Loop through each namespace in the list
  # TODO : replace this block with a single query & jq parser for faster execution
  namespaces=$(kubectl get ns)
  for ns in "${NAMESPACE_ARRAY[@]}"; do
    for prefix in "${prefixes[@]}"; do
      full_ns="${prefix}${ns}"
      # test if full_ns exists in the first column of namespaces
      if grep -q "^$full_ns " <<<"$namespaces"; then
        log_verbose "Namespace $full_ns exists"
        available_namespaces+=("$full_ns")
      fi
    done
  done
}


# Describe storageClass related objects
# TODO: get all other PVC related objects like StatefulSet, Pods, VirtualMachine, etc.
function _get_sc_objects(){
  log_verbose "Collecting Dell storage classes"
  scs=$(kubectl get sc | awk '/dellemc.com/ {print $1}')
  log_verbose "Dell storage classes: $scs"
  for sc in $scs; do
    kubectl get sc "$sc" -o yaml >>"$tempdir/sc-$sc.yaml"

    # Describe PVs in the storage class
    pvs=$(kubectl get pv | grep $sc | awk '{print $1}')
    log_verbose "   Dell Persistent Volumes: $pvs"
    if [ -z "$pvs" ]; then
      echo "There is no PersistentVolume for StorageClass: $sc" >>"$tempdir/describe-pvs-$sc.yaml"
    else
      for pv in $pvs; do
        kubectl describe pv "$pv" >>"$tempdir/decribe-pvs-$sc.yaml"
      done
    fi
    # Describe PVCs in the storage class
    has_pvcs=$(kubectl get pvc -A | grep $sc)
    log_verbose "   Dell Persistent Volume Claims: $pvcs"
    if [ -z "$has_pvcs" ]; then
      echo "There is no PersistentVolumeClaims for StorageClass: $sc" >>"$tempdir/describe-pvcs-$sc.yaml"
    else
      namespaces=$(kubectl get pvc -A | grep $sc | awk '{print $1}' | sort | uniq)
      for ns in $namespaces; do
        kubectl describe pvc -n "$ns" >>"$tempdir/describe-pvcs-$ns-$sc.yaml"
        # For each pvc in the namespace get the related pod
        for pvc in $(kubectl get pvc -n $ns -o jsonpath='{.items[*].metadata.name}'); do
          pods=$(kubectl get pods -n $ns -o json | jq -r --arg pvc "$pvc" '
            .items[] | select(.spec.volumes[]? | .persistentVolumeClaim.claimName == $pvc) | .metadata.name')
          log_verbose "   Related Pods to the PVC: $pods"
          for pod in $pods; do
            kubectl describe pod $pod -n $ns >>"$tempdir/decribe-pods-with-pvc-$ns-$sc.yaml"
          done
        done
      done
    fi
  done
  # Get VolumeAttachments, pretty useful to see what is connected where
  log_verbose "Collecting Dell VolumeAttachments"
  volumeattachments=$(kubectl get volumeattachments.storage.k8s.io | awk '/dellemc.com/ {print $1}')
  if [ -z "$volumeattachments" ]; then
    echo "There is no VolumeAttachments" >>"$tempdir/describe-volumeattachments-dellemc.yaml"
  else
    for va in $volumeattachments; do
      kubectl describe volumeattachments.storage.k8s.io "$va" >>"$tempdir/describe-volumeattachments-dellemc.yaml"
    done
  fi
}

function _get_vcs_objects(){
  vscs=$(kubectl get vsclass | awk '/dellemc.com/ {print $1}')
  log_verbose "Dell Volume Snapshot classes: $scs"
  for vsc in $vscs; do
    kubectl get vsclass "$vsc" -o yaml >>"$tempdir/vsclass-$vsc.yaml"
    vsnaps=$(kubectl get volumesnapshots -A | grep "$vsc")
    log_verbose "  Dell Volume Snapshots: $vsnaps"
    if [ -z "$vsnaps" ]; then
      echo "There is no VolumeSnapshots for VolumeSnapshotClass: $vsc" >>"$tempdir/describe-volumesnapshot-$vsc.yaml"
    else
      namespaces=$(kubectl get volumesnapshots -A | grep $vsc | awk '{print $1}' | sort | uniq)
      for ns in $namespaces; do
        kubectl describe volumesnapshot -n "$ns" >>"$tempdir/describe-volumesnapshots-$ns-$sc.yaml"
      done
    fi
  done
}

#function check_prereqs() {
#	if ! command -v jw &> /dev/null; then
#		echo "jq could not be found. Please install jq, jq is magic!"
#		exit 1
#	fi
#}

function get_node_info() {
  log_verbose "Collecting node info"
  kubectl get nodes -o yaml >>"$tempdir/nodes.yaml"
  kubectl get csinode -o yaml >>"$tempdir/csinodes.yaml"
}

# Get All Dell Storage Details
function get_dell_storage() {
  _get_sc_objects
  _get_vcs_objects
}

function helm_deployment_details() {
  # check if helm command is present
  log_verbose "Checking for helm deployments"
  if command -v helm &>/dev/null; then
    for ns in "${available_namespaces[@]}"; do
      releases=$(helm ls -n "$ns" --short)
      if [ -z "$releases" ]; then
        log_verbose "No helm releases found in namespace $ns"
        echo "No helm releases found in namespace $ns" >>"$tempdir/deployment-method.yaml"
      else
        log_verbose "Helm releases found in namespace $ns: $releases"
        echo "Helm releases found in namespace $ns" >>"$tempdir/deployment-method.yaml"
        for release in $releases; do
          log_verbose "Helm get values for release $release in namespace $ns"
          helm get values "$release" -n "$ns" -o yaml >>"$tempdir/values-$release.yaml"
        done
      fi
    done
  fi
}

function operator_deployment_details() {
  log_verbose "Checking for operator deployments"
  # check if we have Dell CRDs
  crds=$(kubectl get crd | awk '/storage.dell.com/ {print $1}')
  if [ -z "$crds" ]; then
    log_verbose "No CRDs found"
    echo "No CRDs found" >>"$tempdir/deployment-method.yaml"
  else
    log_verbose "CRDs found: $crds"
    echo "CRDs found: $crds" >>"$tempdir/deployment-method.yaml"
    for crd in $crds; do
      kubectl get "$crd" -A -o yaml >>"$tempdir/crd-$crd.yaml"
    done
  fi
}

function get_pod_logs() {
  log_verbose "Collecting pod logs"
  for ns in "${available_namespaces[@]}"; do
    pods=$(kubectl get pods -n "$ns" -o jsonpath='{.items[*].metadata.name}')
    log_verbose "Pods found in namespace $ns: $pods"
    echo "Pods found in namespace $ns: $pods" >>"$tempdir/pods-list.log"
    # get pods describe
    kubectl get pods -n "$ns" -o wide >>"$tempdir/$ns-describe-pods.log"
    echo "---" >>"$tempdir/$ns-describe-pods.log"
    kubectl describe pods -n "$ns" >>"$tempdir/$ns-describe-pods.log"
    # get logs
    for pod in $pods; do
      # get containers of each pod
      containers=$(kubectl get pod "$pod" -n "$ns" -o jsonpath='{.spec.containers[*].name}')
      for container in $containers; do
        kubectl logs $logs_args "$pod" -n "$ns" -c "$container" >>"$tempdir/$ns-$pod-$container.log"
      done
    done
  done
}

# Obtain configmaps
function get_configmaps() {
  log_verbose "Collecting configmaps"
  for ns in "${available_namespaces[@]}"; do
    if kubectl get configmaps -n "$ns" -o name | grep -q .; then
      log_verbose "configmaps found in namespace $ns"
      kubectl get configmaps -n "$ns" -o yaml >>"$tempdir/configmaps-$ns.yaml"
    else
      log_verbose "No configmaps found in namespace $ns"
      echo "No configmaps found in namespace $ns" >>"$tempdir/configmaps-$ns.yaml"
    fi
  done
}

# Obtain secrets
function get_secrets() {
  log_verbose "Collecting secrets"
  for ns in "${available_namespaces[@]}"; do
    secrets=$(kubectl get secrets -n "$ns" | awk '/Opaque/ {print $1}')
    log_verbose "Secrets found in namespace $ns: $secrets"
    for secret in $secrets; do
      echo "---" >>"$tempdir/secrets-$ns.yaml"
      kubectl get secret -n "$ns" "$secret" -o yaml >>"$tempdir/secrets-$ns.yaml"
    done
  done
}
function archive() {
  log_verbose "Creating archive"
  archive_name="csm-diag-$(date +'%Y%m%d_%H%M%S')"
  if command -v zip &>/dev/null; then
    zip -q -r "$archive_name.zip" "$tempdir"
    echo "Archive created with name $archive_name.zip"
  else
    tar -cf "$archive_name.tar" "$tempdir"
    echo "Archive created with name $archive_name.tar"
  fi
}
# main function for the script execution
function main() {
  # Default to calling handle_namespaces if no namespaces provided
  local namespaces=""
  local include_secrets_enabled=false

  while getopts ":n:hsvp" opt; do
    case $opt in
    h) # Help option
      help
      exit 0
      ;;
    n)
      namespaces="$OPTARG"
      ;;
    s)
      include_secrets_enabled="true"
      ;;
    v) # Verbose option
      verbose=1
      ;;
    p)
      logs_args="--previous"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      help
      exit 1
      ;;
    esac
  done

  log_verbose "Verbose mode enabled."
  echo "🚀 Check Dell CSM namespaces"
  if [ -z "$namespaces" ]; then
    get_namespaces $usual_namespaces
  else
    handle_namespaces "$namespaces"
  fi
  if [ -z "$available_namespaces" ]; then
    echo "Could not find any matching namespace"
    help
    exit 1
  fi
  echo "🔍 Get Node info"
  get_node_info

  echo "🗄️ Dell Storage details (StorageClass, PVCs, PVs, VSClass, VolumeSnapshots)"
  get_dell_storage

  if [ "$include_secrets_enabled" = true ]; then
    echo "🔐 Secret"
    get_secrets
  fi

  echo "🗂️ ConfigMap"
  get_configmaps

  echo "🚢 Deployment details"
  helm_deployment_details

  operator_deployment_details

  echo "🧾 Get logs"
  get_pod_logs

  echo "🗜️ Archiving"
  archive

  cleanup
}

main "$@"
